const axios = require('axios');
const https = require('https');

async function fetchRealLCUData() {
    try {
        console.log('üîç Buscando dados reais do LCU...\n');
        
        // Configura√ß√£o para ignorar certificado SSL
        const agent = new https.Agent({
            rejectUnauthorized: false
        });
        
        // Buscar o hist√≥rico de partidas do LCU
        const response = await axios.get('https://127.0.0.1:2999/liveclientdata/allgamedata', {
            httpsAgent: agent,
            auth: {
                username: 'riot',
                password: 'gAAAAABhJL8Z'
            },
            timeout: 5000
        });
        
        console.log('‚ùå Jogo em andamento encontrado - n√£o √© poss√≠vel buscar hist√≥rico');
        
    } catch (error) {
        if (error.code === 'ECONNREFUSED' || error.response?.status === 404) {
            console.log('‚ÑπÔ∏è Nenhum jogo em andamento - tentando buscar hist√≥rico...\n');
            
            try {
                // Tentar buscar dados do hist√≥rico via LCU API
                const historyResponse = await axios.get('https://127.0.0.1:33075/lol-match-history/v1/products/lol/current-summoner/matches', {
                    httpsAgent: agent,
                    headers: {
                        'Authorization': 'Basic cmlvdDo='
                    },
                    timeout: 10000
                });
                
                const matches = historyResponse.data.games.games;
                console.log(`‚úÖ ${matches.length} partidas encontradas no hist√≥rico\n`);
                
                // Buscar partidas personalizadas (queueId 0 ou gameMode CUSTOM)
                const customMatches = matches.filter(match => 
                    match.queueId === 0 || 
                    match.gameMode === 'CLASSIC' && match.gameType === 'CUSTOM_GAME'
                );
                
                console.log(`üéØ ${customMatches.length} partidas personalizadas encontradas\n`);
                
                if (customMatches.length > 0) {
                    const latestCustom = customMatches[0];
                    console.log('üìä √öltima partida personalizada no LCU:');
                    console.log('Game ID:', latestCustom.gameId);
                    console.log('Data:', new Date(latestCustom.gameCreation));
                    console.log('Dura√ß√£o:', latestCustom.gameDuration + 's');
                    console.log('Participantes:', latestCustom.participantIdentities.length);
                    
                    console.log('\nüë• Participantes:');
                    latestCustom.participants.forEach((p, index) => {
                        const identity = latestCustom.participantIdentities.find(id => id.participantId === p.participantId);
                        const summonerName = identity?.player?.summonerName || 'Unknown';
                        console.log(`  ${index + 1}. ${summonerName}: Champion${p.championId} (KDA: ${p.stats.kills}/${p.stats.deaths}/${p.stats.assists})`);
                    });
                    
                    return latestCustom.gameId;
                }
                
            } catch (historyError) {
                console.log('‚ùå Erro ao buscar hist√≥rico do LCU:', historyError.message);
                console.log('‚ÑπÔ∏è LCU pode n√£o estar ativo ou acess√≠vel');
            }
        } else {
            console.log('‚ùå Erro ao conectar com LCU:', error.message);
        }
    }
    
    return null;
}

fetchRealLCUData();
