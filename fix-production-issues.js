const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîß CORRIGINDO PROBLEMAS DE PRODU√á√ÉO\n');

// 1. Verificar e corrigir configura√ß√£o do Angular
console.log('1. CORRIGINDO CONFIGURA√á√ÉO DO ANGULAR:');
try {
  const angularConfigPath = 'src/frontend/angular.json';
  const angularConfig = JSON.parse(fs.readFileSync(angularConfigPath, 'utf8'));
  const buildConfig = angularConfig.projects['lol-matchmaking'].architect.build;
  
  // Corrigir base href para produ√ß√£o
  if (!buildConfig.options.baseHref || buildConfig.options.baseHref === '/') {
    buildConfig.options.baseHref = './';
    console.log('   ‚úÖ Base href corrigido para "./"');
  }
  
  // Garantir que outputPath est√° correto
  if (buildConfig.options.outputPath !== 'dist/frontend/dist/lol-matchmaking/browser') {
    buildConfig.options.outputPath = 'dist/frontend/dist/lol-matchmaking/browser';
    console.log('   ‚úÖ Output path corrigido');
  }
  
  // Salvar configura√ß√£o corrigida
  fs.writeFileSync(angularConfigPath, JSON.stringify(angularConfig, null, 2));
  console.log('   ‚úÖ Configura√ß√£o do Angular salva');
  
} catch (error) {
  console.log(`   ‚ùå Erro ao corrigir Angular: ${error.message}`);
}

// 2. Verificar e corrigir index.html
console.log('\n2. CORRIGINDO INDEX.HTML:');
const indexPath = 'dist/frontend/browser/index.html';
if (fs.existsSync(indexPath)) {
  try {
    let content = fs.readFileSync(indexPath, 'utf8');
    
    // Corrigir base href se necess√°rio
    if (!content.includes('<base href="./"')) {
      content = content.replace('<base href="/">', '<base href="./">');
      content = content.replace('<base href="/"', '<base href="./"');
      console.log('   ‚úÖ Base href corrigido no index.html');
    }
    
    // Verificar se tem scripts
    if (!content.includes('<script')) {
      console.log('   ‚ö†Ô∏è index.html n√£o tem scripts - pode ser problema de build');
    } else {
      console.log('   ‚úÖ index.html tem scripts');
    }
    
    fs.writeFileSync(indexPath, content);
    
  } catch (error) {
    console.log(`   ‚ùå Erro ao corrigir index.html: ${error.message}`);
  }
} else {
  console.log('   ‚ùå index.html n√£o encontrado - execute o build primeiro');
}

// 3. Verificar e corrigir depend√™ncias do backend
console.log('\n3. VERIFICANDO DEPEND√äNCIAS DO BACKEND:');
const backendPackagePath = 'src/backend/package.json';
if (fs.existsSync(backendPackagePath)) {
  try {
    const backendPackage = JSON.parse(fs.readFileSync(backendPackagePath, 'utf8'));
    const deps = { ...backendPackage.dependencies, ...backendPackage.devDependencies };
    
    // Verificar depend√™ncias cr√≠ticas
    const criticalDeps = ['express', 'mysql2', 'discord.js', 'dotenv', 'cors'];
    const missingDeps = criticalDeps.filter(dep => !deps[dep]);
    
    if (missingDeps.length > 0) {
      console.log(`   ‚ö†Ô∏è Depend√™ncias faltando: ${missingDeps.join(', ')}`);
      console.log('   üí° Execute: cd src/backend && npm install');
    } else {
      console.log('   ‚úÖ Todas as depend√™ncias cr√≠ticas est√£o presentes');
    }
    
  } catch (error) {
    console.log(`   ‚ùå Erro ao verificar depend√™ncias: ${error.message}`);
  }
} else {
  console.log('   ‚ùå src/backend/package.json n√£o encontrado');
}

// 4. Verificar e corrigir .env
console.log('\n4. VERIFICANDO ARQUIVO .ENV:');
const envPath = '.env';
if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf8');
  const requiredVars = ['PORT', 'DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME', 'DISCORD_TOKEN', 'RIOT_API_KEY'];
  const missingVars = requiredVars.filter(varName => !envContent.includes(varName + '='));
  
  if (missingVars.length > 0) {
    console.log(`   ‚ö†Ô∏è Vari√°veis faltando: ${missingVars.join(', ')}`);
    console.log('   üí° Adicione as vari√°veis faltando ao arquivo .env');
  } else {
    console.log('   ‚úÖ Todas as vari√°veis de ambiente est√£o presentes');
  }
} else {
  console.log('   ‚ùå Arquivo .env n√£o encontrado');
  console.log('   üí° Crie um arquivo .env com as vari√°veis necess√°rias');
}

// 5. Verificar estrutura de pastas
console.log('\n5. VERIFICANDO ESTRUTURA DE PASTAS:');
const requiredPaths = [
  'dist/backend',
  'dist/frontend/browser',
  'src/backend',
  'src/frontend',
  'src/electron'
];

requiredPaths.forEach(p => {
  if (!fs.existsSync(p)) {
    console.log(`   ‚ùå ${p}: n√£o existe`);
  } else {
    console.log(`   ‚úÖ ${p}: existe`);
  }
});

// 6. Sugest√µes de corre√ß√£o
console.log('\n6. SUGEST√ïES DE CORRE√á√ÉO:');
console.log('   üìù Se o frontend n√£o carrega em produ√ß√£o:');
console.log('   1. Execute: npm run build:frontend');
console.log('   2. Verifique se dist/frontend/browser/index.html existe');
console.log('   3. Verifique se o base href est√° correto');
console.log('');
console.log('   üìù Se o backend n√£o conecta:');
console.log('   1. Execute: npm run build:backend');
console.log('   2. Verifique se dist/backend/server.js existe');
console.log('   3. Execute: cd dist/backend && node server.js');
console.log('   4. Verifique se n√£o h√° erros de depend√™ncias');
console.log('');
console.log('   üìù Para testar o execut√°vel:');
console.log('   1. Execute: npm run electron:build');
console.log('   2. Abra o execut√°vel gerado');
console.log('   3. Pressione F12 para ver logs de erro');
console.log('   4. Verifique o terminal para logs do backend');

console.log('\nüîß CORRE√á√ïES CONCLU√çDAS'); 