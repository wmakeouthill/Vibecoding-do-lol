{
  "name": "lol-matchmaking-app",
  "productName": "LoL Matchmaking",
  "version": "1.0.0",
  "description": "Sistema de matchmaking customizado para League of Legends com fila 5v5 e sistema MMR",
  "main": "dist/electron/main.js",
  "homepage": "./",
  "author": "VibeCode",
  "license": "MIT",
  "private": true,
  "scripts": {
    "build": "npm run build:complete",
    "build:complete": "npm run clean && npm run install:all-deps && npm run build:all && npm run copy:all-assets && npm run p2p:copy-scripts && npm run verify:build && npm run create:executable",
    "build:quick": "npm run clean && npm run install:all-deps && npm run build:all && npm run copy:all-assets && npm run p2p:copy-scripts",
    "build:all": "npm run build:backend && npm run build:frontend && npm run build:electron",
    "build:backend": "tsc -p src/backend/tsconfig.json",
    "build:frontend": "cd src/frontend && ng build --configuration production",
    "build:electron": "tsc -p src/electron/tsconfig.json",
    "create:executable": "echo 'üöÄ Criando execut√°vel Windows...' && electron-builder --win --publish=never && echo '‚úÖ Execut√°vel criado em: release/'",
    "clean": "node -e \"const fs=require('fs'); if(fs.existsSync('dist')){fs.rmSync('dist',{recursive:true,force:true}); console.log('üßπ Pasta dist limpa');} if(fs.existsSync('release')){fs.rmSync('release',{recursive:true,force:true}); console.log('üßπ Pasta release limpa');}\"",
    "install:all-deps": "npm run install:backend-deps && npm run install:frontend-deps",
    "install:backend-deps": "echo 'üì¶ Instalando depend√™ncias do backend...' && cd src/backend && npm install",
    "install:frontend-deps": "echo 'üì¶ Instalando depend√™ncias do frontend...' && cd src/frontend && npm install",
    "copy:all-assets": "npm run copy:backend-deps && npm run copy:frontend-build && npm run copy:database",
    "copy:backend-deps": "node -e \"const fs=require('fs'); const path=require('path'); console.log('üîÑ Copiando depend√™ncias do backend...'); if(!fs.existsSync('dist/backend')){fs.mkdirSync('dist/backend',{recursive:true});} if(fs.existsSync('src/backend/node_modules')){fs.cp('src/backend/node_modules','dist/backend/node_modules',{recursive:true},(err)=>{if(err){console.error('‚ùå Erro ao copiar:',err);}else{console.log('‚úÖ Depend√™ncias do backend copiadas');}});} else {console.error('‚ùå src/backend/node_modules n√£o encontrado!');}\"",
    "copy:frontend-build": "node -e \"const fs=require('fs'); console.log('üîÑ Copiando build do frontend...'); if(!fs.existsSync('dist/frontend')){fs.mkdirSync('dist/frontend',{recursive:true});} if(fs.existsSync('src/frontend/dist/lol-matchmaking/browser')){fs.cp('src/frontend/dist/lol-matchmaking/browser','dist/frontend/dist/lol-matchmaking/browser',{recursive:true},(err)=>{if(err){console.error('‚ùå Erro ao copiar:',err);}else{console.log('‚úÖ Build do frontend copiado');}});} else {console.error('‚ùå src/frontend/dist/lol-matchmaking/browser n√£o encontrado!');}\"",
    "copy:database": "node -e \"const fs=require('fs'); console.log('üîÑ Copiando banco de dados...'); const sourcePath='src/backend/database/database.sqlite'; if(fs.existsSync(sourcePath)){if(!fs.existsSync('dist/backend/database')){fs.mkdirSync('dist/backend/database',{recursive:true});} fs.copyFileSync(sourcePath,'dist/backend/database/database.sqlite'); console.log('‚úÖ Banco de dados copiado de src/backend/database/');} else {console.log('‚ö†Ô∏è src/backend/database/database.sqlite n√£o encontrado, ser√° criado automaticamente');}\"",
    "verify:build": "node -e \"const fs=require('fs'); console.log('üîç Verificando build completo...'); const checks=[{path:'dist/backend/server.js',name:'Backend JS'},{path:'dist/backend/signaling-server-standalone.js',name:'P2P Signaling Server'},{path:'dist/backend/services/signaling-server.js',name:'P2P Service'},{path:'dist/backend/node_modules',name:'Backend deps'},{path:'dist/backend/node_modules/socket.io',name:'Socket.IO for P2P'},{path:'dist/backend/node_modules/ws',name:'WebSocket for P2P'},{path:'dist/frontend/dist/lol-matchmaking/browser',name:'Frontend build'},{path:'dist/electron/main.js',name:'Electron main'},{path:'dist/start-p2p.bat',name:'P2P Start Script'},{path:'dist/P2P-README.txt',name:'P2P README'}]; let allOk=true; checks.forEach(check=>{const exists=fs.existsSync(check.path); console.log(`${exists?'‚úÖ':'‚ùå'} ${check.name}: ${check.path}`); if(!exists)allOk=false;}); console.log(''); console.log('üéØ VERIFICA√á√ÉO P2P AUTOM√ÅTICO:'); const p2pChecks=[{path:'dist/electron/main.js',check:'startP2PSignalingServer',name:'P2P auto-start no Electron'},{path:'dist/backend/signaling-server-standalone.js',check:'SignalingServer',name:'P2P standalone server'}]; p2pChecks.forEach(check=>{if(fs.existsSync(check.path)){const content=fs.readFileSync(check.path,'utf8'); const hasFeature=content.includes(check.check); console.log(`${hasFeature?'‚úÖ':'‚ùå'} ${check.name}: ${hasFeature?'OK':'MISSING'}`); if(!hasFeature)allOk=false;} else {console.log(`‚ùå ${check.name}: FILE NOT FOUND`); allOk=false;}}); console.log(''); if(allOk){console.log('üéâ Build verificado com sucesso!'); console.log('‚ú® P2P ser√° iniciado automaticamente no execut√°vel!');}else{console.error('‚ùå Alguns arquivos ou recursos P2P est√£o faltando');}\"",    "dev": "concurrently \"npm run dev:backend\" \"npm run dev:frontend\" \"npm run dev:electron:wait\"",
    "dev:full": "echo üöÄ Iniciando TUDO (Backend + Frontend + Electron)... && npm run dev",
    "dev:fast": "concurrently \"npm run dev:frontend\" \"npm run dev:electron:wait\"",
    "dev:backend": "nodemon --exec ts-node src/backend/server.ts",
    "dev:discord": "node discord-bot.js",
    "dev:frontend": "cd src/frontend && ng serve",
    "dev:electron": "npm run build:electron && cross-env NODE_ENV=development electron .",
    "dev:electron:wait": "node scripts/wait-for-all-servers.js && npm run dev:electron",
    "electron": "electron .",
    "electron:dev": "cross-env NODE_ENV=development electron .",
    "electron:prod": "cross-env NODE_ENV=production electron .",
    "pack": "npm run build:quick && npm run verify:build && electron-builder --publish=never",
    "dist": "npm run build:quick && electron-builder --publish=never",
    "dist:win": "npm run build:quick && electron-builder --win --publish=never",
    "dist:mac": "npm run build:quick && electron-builder --mac --publish=never",
    "dist:linux": "npm run build:quick && electron-builder --linux --publish=never",
    "build:only": "npm run build:quick",
    "exe:only": "electron-builder --win --publish=never",
    "start": "npm run build && npm run electron",
    "start:with-p2p": "npm run build && concurrently \"npm run p2p:signaling\" \"npm run electron\"",
    "test": "echo \"Error: no test specified\" && exit 1",
    "test:p2p": "concurrently \"npm run p2p:signaling\" \"npm run dev:frontend\" \"npm run test:p2p:instances\"",
    "test:p2p:instances": "node scripts/wait-for-all-servers.js && concurrently \"npm run dev:electron\" \"npm run dev:electron\" \"npm run dev:electron\"",
    "test:connectivity": "node scripts/test-p2p-connectivity.js",
    "p2p:signaling": "cd src/backend && npm run signaling",
    "p2p:install": "cd src/backend && npm install && cd ../frontend && npm install",
    "p2p:build": "npm run build && npm run p2p:copy-scripts",
    "p2p:copy-scripts": "node scripts/create-p2p-scripts.js",
    "release:win": "npm run p2p:build && npm run verify:build && npm run pack:win && npm run installer:win",
    "pack:win": "electron-builder --win --dir --publish=never",
    "installer:win": "electron-builder --win --publish=never",
    "release:complete": "npm run build && npm run release:win && echo 'üéâ Release Windows completo com P2P! Execut√°vel em: release/win-unpacked/ | Instalador em: release/'"
  },
  "keywords": [
    "league of legends",
    "matchmaking",
    "electron",
    "angular",
    "gaming",
    "mmr",
    "queue"
  ],
  "build": {
    "appId": "com.vibecode.lol-matchmaking",
    "productName": "LoL Matchmaking",
    "directories": {
      "output": "release",
      "buildResources": "build"
    },
    "files": [
      "dist/electron/**/*",
      "package.json",
      "!node_modules/**/*",
      "!src/**/*"
    ],
    "extraResources": [
      {
        "from": "dist/backend",
        "to": "backend",
        "filter": [
          "**/*"
        ]
      },
      {
        "from": "dist/frontend/dist/lol-matchmaking/browser",
        "to": "frontend/dist/lol-matchmaking/browser",
        "filter": [
          "**/*"
        ]
      },
      {
        "from": "dist/backend/node_modules",
        "to": "backend/node_modules",
        "filter": [
          "**/*"
        ]
      },
      {
        "from": "dist/start-p2p.bat",
        "to": "start-p2p.bat"
      },
      {
        "from": "dist/start-normal.bat",
        "to": "start-normal.bat"
      },
      {
        "from": "dist/P2P-README.txt",
        "to": "P2P-README.txt"
      }
    ],
    "asarUnpack": [
      "backend/**/*"
    ],
    "asar": true,
    "npmRebuild": false,
    "nodeGypRebuild": false,
    "win": {
      "target": [
        {
          "target": "nsis",
          "arch": [
            "x64"
          ]
        }
      ],
      "icon": "build/icon.ico",
      "requestedExecutionLevel": "asInvoker"
    },
    "mac": {
      "target": "dmg",
      "icon": "build/icon.icns"
    },
    "linux": {
      "target": "AppImage",
      "icon": "build/icon.png"
    },
    "nsis": {
      "oneClick": false,
      "allowToChangeInstallationDirectory": true,
      "createDesktopShortcut": true,
      "createStartMenuShortcut": true,
      "installerIcon": "build/icon.ico",
      "uninstallerIcon": "build/icon.ico",
      "installerHeaderIcon": "build/icon.ico",
      "displayLanguageSelector": false,
      "language": "1046",
      "artifactName": "${productName} Setup ${version}.${ext}",
      "deleteAppDataOnUninstall": false
    }
  },
  "devDependencies": {
    "@types/axios": "^0.9.36",
    "@types/cors": "^2.8.19",
    "@types/electron": "^1.4.38",
    "@types/express": "^5.0.3",
    "@types/node": "^24.0.1",
    "@types/socket.io": "^3.0.1",
    "@types/ws": "^8.18.1",
    "concurrently": "^9.1.2",
    "cross-env": "^7.0.3",
    "electron": "^36.4.0",
    "electron-builder": "^26.0.12",
    "nodemon": "^3.1.10",
    "ts-node": "^10.9.2",
    "wait-on": "^8.0.3"
  },
  "dependencies": {
    "axios": "^1.9.0",
    "cors": "^2.8.5",
    "discord.js": "^14.20.0",
    "express": "^5.1.0",
    "express-rate-limit": "^7.5.0",
    "helmet": "^8.1.0",
    "socket.io": "^4.8.1",
    "socket.io-client": "^4.8.1",
    "sqlite": "^5.1.1",
    "sqlite3": "^5.1.7",
    "ws": "^8.18.2"
  }
}
