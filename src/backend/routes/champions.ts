import { Request, Response, RequestHandler } from 'express';
import { DataDragonService } from '../services/DataDragonService';

export function setupChampionRoutes(app: any, dataDragonService: DataDragonService) {
  console.log('üèÜ [setupChampionRoutes] Fun√ß√£o chamada - configurando rotas de campe√µes');

  // Endpoint para obter todos os campe√µes do DataDragon
  app.get('/api/champions', (async (req: Request, res: Response) => {
    try {
      console.log('üèÜ [GET /api/champions] Obtendo dados dos campe√µes...');
      console.log('üèÜ [GET /api/champions] DataDragonService carregado:', dataDragonService.isLoaded());

      // Garantir que os campe√µes estejam carregados
      if (!dataDragonService.isLoaded()) {
        console.log('üîÑ [GET /api/champions] Carregando campe√µes...');
        await dataDragonService.loadChampions();
        console.log('‚úÖ [GET /api/champions] Campe√µes carregados com sucesso');
      }

      const champions = dataDragonService.getAllChampions();
      const championsByRole = dataDragonService.getChampionsByRole();

      console.log(`‚úÖ [GET /api/champions] ${champions.length} campe√µes retornados`);
      console.log('üèÜ [GET /api/champions] Primeiros 5 campe√µes:', champions.slice(0, 5).map(c => c.name));

      res.json({
        success: true,
        champions: champions,
        championsByRole: championsByRole,
        total: champions.length
      });

    } catch (error: any) {
      console.error('‚ùå [GET /api/champions] Erro:', error);
      res.status(500).json({
        success: false,
        error: error.message
      });
    }
  }) as RequestHandler);

  // Endpoint para obter campe√µes por role
  app.get('/api/champions/role/:role', (async (req: Request, res: Response) => {
    try {
      const { role } = req.params;
      console.log(`üèÜ [GET /api/champions/role/${role}] Obtendo campe√µes da role...`);

      // Garantir que os campe√µes estejam carregados
      if (!dataDragonService.isLoaded()) {
        console.log('üîÑ [GET /api/champions/role] Carregando campe√µes...');
        await dataDragonService.loadChampions();
      }

      const championsByRole = dataDragonService.getChampionsByRole();
      const roleChampions = championsByRole[role as keyof typeof championsByRole] || [];

      console.log(`‚úÖ [GET /api/champions/role/${role}] ${roleChampions.length} campe√µes retornados`);

      res.json({
        success: true,
        champions: roleChampions,
        role: role,
        total: roleChampions.length
      });

    } catch (error: any) {
      console.error('‚ùå [GET /api/champions/role] Erro:', error);
      res.status(500).json({
        success: false,
        error: error.message
      });
    }
  }) as RequestHandler);
} 