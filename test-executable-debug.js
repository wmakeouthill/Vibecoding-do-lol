const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

console.log('üî¨ TESTE DEBUG DO EXECUT√ÅVEL');
console.log('===========================\n');

// Verificar se h√° execut√°vel na pasta release
const releaseDir = path.join(__dirname, 'release');
const possibleExes = [
  'LoL Matchmaking Setup 1.0.0.exe',
  'LoL Matchmaking.exe',
  path.join('win-unpacked', 'LoL Matchmaking.exe')
];

let exePath = null;

if (fs.existsSync(releaseDir)) {
  console.log('üìÅ Verificando pasta release...');
  const files = fs.readdirSync(releaseDir);
  console.log('üìÑ Arquivos encontrados:', files);
  
  for (const possibleExe of possibleExes) {
    const fullPath = path.join(releaseDir, possibleExe);
    if (fs.existsSync(fullPath)) {
      exePath = fullPath;
      console.log('‚úÖ Execut√°vel encontrado:', fullPath);
      break;
    }
  }
}

if (!exePath) {
  console.log('‚ùå Execut√°vel n√£o encontrado na pasta release');
  console.log('üí° Execute: npm run build:complete');
  process.exit(1);
}

console.log('\nüöÄ Iniciando aplica√ß√£o em modo debug...');
console.log('üìã Logs detalhados aparecer√£o abaixo:\n');
console.log('=' .repeat(60));

const startTime = Date.now();

// Executar com m√°ximo detalhamento de logs
const app = spawn(exePath, [], {
  stdio: 'pipe',
  detached: false,
  env: {
    ...process.env,
    ELECTRON_ENABLE_LOGGING: '1',
    ELECTRON_LOG_LEVEL: 'verbose',
    DEBUG: '*'
  }
});

// Capturar STDOUT
app.stdout.on('data', (data) => {
  const elapsed = ((Date.now() - startTime) / 1000).toFixed(1);
  const lines = data.toString().split('\n').filter(line => line.trim());
  
  lines.forEach(line => {
    console.log(`[${elapsed}s] üì§ STDOUT: ${line}`);
  });
});

// Capturar STDERR (onde ficam os logs do Electron)
app.stderr.on('data', (data) => {
  const elapsed = ((Date.now() - startTime) / 1000).toFixed(1);
  const lines = data.toString().split('\n').filter(line => line.trim());
  
  lines.forEach(line => {
    console.log(`[${elapsed}s] üîß STDERR: ${line}`);
  });
});

app.on('close', (code) => {
  const elapsed = ((Date.now() - startTime) / 1000).toFixed(1);
  console.log(`\n[${elapsed}s] üèÅ Aplica√ß√£o fechada com c√≥digo ${code}`);
  
  if (code === 0) {
    console.log('‚úÖ Aplica√ß√£o fechou normalmente');
  } else {
    console.log('‚ùå Aplica√ß√£o fechou com erro');
  }
});

app.on('error', (error) => {
  console.log('‚ùå Erro ao iniciar aplica√ß√£o:', error.message);
  console.log('üîß Detalhes:', {
    code: error.code,
    errno: error.errno,
    syscall: error.syscall,
    path: error.path
  });
});

// Log de progresso a cada 5 segundos
const progressInterval = setInterval(() => {
  const elapsed = ((Date.now() - startTime) / 1000).toFixed(0);
  console.log(`‚è∞ [${elapsed}s] Aguardando inicializa√ß√£o...`);
}, 5000);

// Finalizar teste ap√≥s 60 segundos se n√£o fechar sozinho
setTimeout(() => {
  console.log('\n‚è∞ Tempo limite de 60 segundos atingido');
  console.log('üîç Se a janela n√£o abriu, h√° um problema na inicializa√ß√£o');
  clearInterval(progressInterval);
  
  if (!app.killed) {
    console.log('üîÑ Tentando finalizar aplica√ß√£o...');
    app.kill('SIGTERM');
    
    setTimeout(() => {
      if (!app.killed) {
        console.log('üíÄ For√ßando finaliza√ß√£o...');
        app.kill('SIGKILL');
      }
    }, 5000);
  }
}, 60000);

// Capturar Ctrl+C para finalizar o processo
process.on('SIGINT', () => {
  console.log('\n\n‚èπÔ∏è Finalizando teste...');
  clearInterval(progressInterval);
  app.kill();
  process.exit(0);
});

console.log('üí° Pressione Ctrl+C para finalizar o teste');
console.log('‚è∞ Teste ser√° finalizado automaticamente em 60 segundos'); 