const axios = require('axios');

// Configura√ß√£o
const BASE_URL = 'http://localhost:3000/api';

async function testMMRCalculation() {
  console.log('üß™ Testando novo sistema de c√°lculo de MMR e LP (come√ßando do 0)...\n');

  try {
    // 1. Testar rec√°lculo de LP existente
    console.log('1Ô∏è‚É£ Testando rec√°lculo de LP de partidas existentes...');
    const recalcResponse = await axios.post(`${BASE_URL}/admin/recalculate-custom-lp`);
    
    if (recalcResponse.data.success) {
      console.log('‚úÖ Rec√°lculo executado com sucesso!');
      console.log(`üìä Partidas afetadas: ${recalcResponse.data.affectedMatches}`);
      console.log(`üë• Jogadores afetados: ${recalcResponse.data.affectedPlayers}`);
      
      if (recalcResponse.data.details && recalcResponse.data.details.length > 0) {
        console.log('\nüìã Detalhes do rec√°lculo:');
        recalcResponse.data.details.slice(0, 3).forEach((detail, index) => {
          console.log(`   Partida ${detail.matchId}:`);
          console.log(`     Time 1 MMR: ${detail.team1MMR} (come√ßando do 0)`);
          console.log(`     Time 2 MMR: ${detail.team2MMR} (come√ßando do 0)`);
          console.log(`     Vencedor: Time ${detail.winnerTeam}`);
          console.log(`     LP Changes:`, detail.newLpChanges);
        });
      }
    } else {
      console.log('‚ùå Falha no rec√°lculo:', recalcResponse.data.error);
    }

    // 2. Verificar leaderboard atualizado
    console.log('\n2Ô∏è‚É£ Verificando leaderboard atualizado...');
    const leaderboardResponse = await axios.get(`${BASE_URL}/stats/participants-leaderboard?limit=10`);
    
    if (leaderboardResponse.data.success) {
      console.log('‚úÖ Leaderboard carregado com sucesso!');
      console.log('\nüèÜ Top 10 jogadores (MMR come√ßando do 0):');
      leaderboardResponse.data.data.slice(0, 10).forEach((player, index) => {
        const mmrStatus = player.custom_lp === 0 ? 'üÜï Novo' : 
                         player.custom_lp < 500 ? 'ü•â Iniciante' :
                         player.custom_lp < 1000 ? 'ü•à Intermedi√°rio' : 'ü•á Avan√ßado';
        console.log(`${index + 1}. ${player.summoner_name} - MMR: ${player.custom_lp} ${mmrStatus}, Jogos: ${player.custom_games_played}, Vit√≥rias: ${player.custom_wins}`);
      });
    } else {
      console.log('‚ùå Falha ao carregar leaderboard:', leaderboardResponse.data.error);
    }

    // 3. Verificar estat√≠sticas de uma partida espec√≠fica
    console.log('\n3Ô∏è‚É£ Verificando estat√≠sticas de partidas customizadas...');
    const customMatchesResponse = await axios.get(`${BASE_URL}/matches/custom/test?limit=5`);
    
    if (customMatchesResponse.data.success && customMatchesResponse.data.matches.length > 0) {
      console.log('‚úÖ Partidas customizadas carregadas!');
      console.log('\nüéÆ √öltimas partidas customizadas:');
      customMatchesResponse.data.matches.slice(0, 3).forEach((match, index) => {
        console.log(`   Partida ${match.id}:`);
        console.log(`     Status: ${match.status}`);
        console.log(`     Vencedor: Time ${match.winner_team}`);
        console.log(`     LP Total: ${match.custom_lp}`);
        if (match.lp_changes) {
          const lpChanges = JSON.parse(match.lp_changes);
          console.log(`     LP Changes:`, lpChanges);
          
          // Mostrar exemplo de c√°lculo
          const players = Object.keys(lpChanges);
          if (players.length > 0) {
            const player = players[0];
            const lpChange = lpChanges[player];
            console.log(`     Exemplo: ${player} ganhou ${lpChange > 0 ? '+' : ''}${lpChange} LP`);
          }
        }
      });
    } else {
      console.log('‚ùå Falha ao carregar partidas customizadas:', customMatchesResponse.data.error);
    }

    // 4. Mostrar exemplos de c√°lculo
    console.log('\n4Ô∏è‚É£ Exemplos de c√°lculo do novo sistema:');
    console.log('üìä Sistema come√ßa do MMR 0 (n√£o 1000 como Riot):');
    console.log('   ‚Ä¢ Jogador MMR 0 vs Time MMR 0: +19 LP (vit√≥ria) / -14 LP (derrota)');
    console.log('   ‚Ä¢ Jogador MMR 0 vs Time MMR 200: +27 LP (vit√≥ria) / -6 LP (derrota)');
    console.log('   ‚Ä¢ Jogador MMR 500 vs Time MMR 500: +18 LP (vit√≥ria) / -15 LP (derrota)');
    console.log('   ‚Ä¢ Jogador MMR 500 vs Time MMR 300: +10 LP (vit√≥ria) / -23 LP (derrota)');
    console.log('   ‚Ä¢ Fator K = 16 (mais conservador que Riot = 32)');

    console.log('\nüéâ Teste conclu√≠do! O novo sistema de MMR est√° funcionando come√ßando do 0.');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.response?.data || error.message);
  }
}

// Executar teste
testMMRCalculation(); 