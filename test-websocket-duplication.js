const WebSocket = require('ws');

console.log('üß™ Testando duplica√ß√£o de conex√µes WebSocket...');

let connectionCount = 0;
const connections = [];

function createConnection(id) {
  console.log(`üîó [${id}] Criando conex√£o #${id}...`);
  
  const ws = new WebSocket('ws://localhost:3000/ws');
  connections.push({ id, ws });

  ws.on('open', () => {
    connectionCount++;
    console.log(`‚úÖ [${id}] Conex√£o #${id} aberta (Total: ${connectionCount})`);
    
    // Enviar mensagem de teste
    const message = { type: 'get_discord_status' };
    ws.send(JSON.stringify(message));
    console.log(`üì§ [${id}] Enviado:`, message.type);
  });

  ws.on('message', (data) => {
    try {
      const message = JSON.parse(data.toString());
      console.log(`üì• [${id}] Recebido:`, message.type);
    } catch (error) {
      console.error(`‚ùå [${id}] Erro ao processar mensagem:`, error);
    }
  });

  ws.on('close', () => {
    connectionCount--;
    console.log(`üîå [${id}] Conex√£o #${id} fechada (Total: ${connectionCount})`);
  });

  ws.on('error', (error) => {
    console.error(`‚ùå [${id}] Erro na conex√£o #${id}:`, error);
  });

  return ws;
}

// Criar m√∫ltiplas conex√µes para simular duplica√ß√£o
console.log('üîÑ Criando m√∫ltiplas conex√µes...');

const ws1 = createConnection('A');
setTimeout(() => createConnection('B'), 1000);
setTimeout(() => createConnection('C'), 2000);

// Fechar conex√µes ap√≥s 10 segundos
setTimeout(() => {
  console.log('üîå Fechando todas as conex√µes...');
  connections.forEach(({ id, ws }) => {
    console.log(`üîå Fechando conex√£o ${id}...`);
    ws.close();
  });
  
  setTimeout(() => {
    console.log('‚è∞ Teste conclu√≠do');
    process.exit(0);
  }, 2000);
}, 10000); 